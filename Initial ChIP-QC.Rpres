Initial ChIP-QC
========================================================
author: 
date: 

First Slide
========================================================

ChIP-seq data is very noisy and can be variable in specificity and sensitivity depending on the ChIP used.

Several tools exist in R to allow us to evaluate our ChIP-prior to peak calling and post visualisation in a browser.

ChIPQC package
========================================================

The ChIPQC package was developed to wrap up most of the useful metrics and place them in the right context.

Given unfiltered data it processes the data and gathers the QC metrics at the appropriate filtering steps.

Loading packages
===============
First lets load the packages we need

```{r, echo=FALSE}
library(ChIPQC)
library(GenomeInfoDb)
library(BiocParallel)
```



ChIPQCsample
========================================================

The most basic function in ChIPQC is ChIPQCsample() which will gather the information on a single sample.

Just a BAM file name, genome for annotation and any areas of blacklisted signal.

```{r, echo=T,cache=T}
setwd(getwd())
myQC <- ChIPQCsample("/Users/tcarroll/chipseqcourse/chipseqDatabam/wgEncodeSydhTfbsCh12CmycIggrabRawDataRep1sorted.bam.bam",
             annotation="mm9",
             blacklist = "/Users/tcarroll/chipseqcourse//referenceData/mm9-blacklist.bed",
             chromosomes=paste0(1:2))
```


Strange Results for Reads in Blacklist and features.
========================================================
```{r, echo=T}
myQC
```

Fixing differences in Genome Contig Annotation.
========================================================
Lets check names of contigs in our BAMS
```{r, echo=T}
myBam <- BamFile("/Users/tcarroll/chipseqcourse/chipseqDatabam/wgEncodeSydhTfbsCh12CmycIggrabRawDataRep1sorted.bam.bam")
names(scanBamHeader(myBam)$targets)
```

Fixing differences in Genome Contig Annotation.2
========================================================
Lets check names of contigs in our BAMS
```{r, echo=T}
myBL <- ChIPQC:::GetGRanges("/Users/tcarroll/chipseqcourse//referenceData/mm9-blacklist.bed")
myBL <- renameSeqlevels(myBL,gsub("chr","",seqlevels(myBL)))
```

We will also need to the same for gene annotation
========================================================
We can extract,alter and provide custom feature annotation for ChIPQC

```{r, echo=T}
mm9Anno <- ChIPQC:::getAnnotation("mm9",AllChr=NULL)
mm9AnnoNew <- lapply(mm9Anno[-1],
                  function(x)
                  renameSeqlevels(x,gsub("chr","",seqlevels(x))
                       )
              )
```

Lets now provide fixed annotation
========================================================
We can now try with fixed annotation

```{r, echo=T,cache=T}
myQC <- ChIPQCsample("/Users/tcarroll/chipseqcourse/chipseqDatabam/wgEncodeSydhTfbsCh12CmycIggrabRawDataRep1sorted.bam.bam",
             annotation=mm9AnnoNew,
             blacklist = myBL,
             chromosomes=paste0(1:2)
             )

```

These results look better
========================================================
```{r, echo=T,cache=T}
myQC
```

Some useful plots
=========================================================
In the CC plot we see fragment length and background peak.
```{r, echo=T,cache=T}
p <- plotCC(myQC)
p$layers[[2]] <- NULL
p
```

Some more useful plots
=========================================================
By comparing SSD before and after Blacklisting we get an understanding of artefact and remaining signal.
```{r, echo=T,cache=T}
plotSSD(myQC)+xlim(0,50)
```

Some more useful plots
=========================================================
By using Regi plot we can see where the distribution of signal in our features.

```{r, echo=T,cache=T}
plotRegi(myQC)
```




Running across an experiment
=========================================================
Lets set up a ChIPQC evaluation across all the experiments


```{r, echo=FALSE,cache=T,eval=T}

myRes <- bplapply(indexedBams,function(x)
  ChIPQCsample(x,
             annotation=mm9AnnoNew,
             blacklist = myBL,
             chromosomes=NULL
             ))
```

Running across an experiment
=========================================================

Now we can get the mean fragmentlength across samples for peak calling on my peaks

```{r, echo=FALSE,cache=T,eval=T}

mean(unlist(lapply(myRes,fragmentlength))
```
     
We will come back to QC when we have some peaks.
