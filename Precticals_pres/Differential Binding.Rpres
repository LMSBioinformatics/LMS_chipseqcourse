Differential Binding
========================================================
author: MRC Clinical Sciences Centre
width: 1440
height: 1100
autosize: true
font-import: <link href='http://fonts.googleapis.com/css?family=Slabo+27px' rel='stylesheet' type='text/css'>
font-family: 'Slabo 27px', serif;
css:style.css

Intro to differential binding
========================================================

We may expect binding to occur in differing conditions.
There are two main ways of looking for differing peaks
-Occupancy analysis 
-Differential binding analysis

Here we will briefly discuss both

loading the libraries
========================================================


```{r}
library(ChIPQC)
library(DESeq2)
library(GenomicRanges)
library(Rsubread)
```



Reading in a peak from Macs
========================================================
Lets load a single set of peaks fromn Macs calls for Myc in mel and ch12 cell lines.
```{r,eval=F,echo=F}
macsPeaks <- dir("/Users/tcarroll/chipseqcourse/MacsPeaks/",full.names=T)
singlePeakSet <- ChIPQC:::GetGRanges(macsPeaks[1],sep="\t",simplify=T)
singlePeakSet
```

```{r,eval=T,echo=T}
macsPeaks <- dir("../MacsPeaks/",full.names=T)
singlePeakSet <- ChIPQC:::GetGRanges(macsPeaks[1],sep="\t",simplify=T)
singlePeakSet
```

Getting a consensus set
========================================================
To get a consensus set first we "flatten" all peak sets to a single set of peaks occuring in any conditions.

Overlapping peaks are merged

```{r, echo=TRUE,cache=T}
listOfPeaks <- GRangesList(lapply(macsPeaks,function(x)ChIPQC:::GetGRanges(x,sep="\t",simplify=T)))
flattenedPeaks <- reduce(unlist(listOfPeaks))
```

The next step would be to identify when samples shared peaks
========================================================
```{r, echo=TRUE}
matOfOverlaps <- sapply(listOfPeaks,function(x)
(flattenedPeaks %over% x)+0
)

colnames(matOfOverlaps) <- basename(gsub("_peaks\\.xls","",macsPeaks))


elementMetadata(flattenedPeaks) <- matOfOverlaps

flattenedPeaks[1:2,]
```

========================================================
We can get a quick idea about where overlaps occur using vennCounts

```{r, echo=TRUE}
limma:::vennCounts(as.data.frame(elementMetadata(flattenedPeaks)))
```


========================================================
Or we can view as VennDiagram

```{r, echo=T,fig.width=20, fig.height=20}
limma:::vennDiagram(as.data.frame(elementMetadata(flattenedPeaks)))
```


========================================================
Now we can identify common peaks

```{r, echo=TRUE}

mych12Peaks <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycch12rep1 + 
                 elementMetadata(flattenedPeaks)$mycch12rep2 == 2]
mycMelPeaks <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycmelrep1 +                  elementMetadata(flattenedPeaks)$mycmelrep2 == 2]

```

========================================================
And some unique peaks 
```{r, echo=TRUE}

mycMelPeaks_Only <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycmelrep1 +                  elementMetadata(flattenedPeaks)$mycmelrep2 == 2 &
elementMetadata(flattenedPeaks)$mycch12rep1 + 
                 elementMetadata(flattenedPeaks)$mycch12rep2 == 0]

mycMelPeaks_Only[1,]
```

We can check the Venn to see our numbers add up

Simple Differential binding
========================================================
Now we take high confidence peaks in either condition.

```{r, echo=TRUE}

highConfidence_Only <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycmelrep1 +                  elementMetadata(flattenedPeaks)$mycmelrep2 == 2 |
elementMetadata(flattenedPeaks)$mycch12rep1 + 
                 elementMetadata(flattenedPeaks)$mycch12rep2 == 2]

```

Simple Differential binding
========================================================
Now we can look to see if we need resizing.
```{r, echo=TRUE}
boxplot(width(highConfidence_Only))
abline(h=400,col="red")
```
The majority of peaks are around 400 so we will resize all peaks to this for ease here

Simple Differential binding
========================================================
Now we can resize to a sensible size
```{r, echo=TRUE}
PeaksToCount <- resize(highConfidence_Only,width = 400,fix = "center")
PeaksToCount[1:2,]
```

Simple Differential binding - Counting
========================================================
Now we can count the reads from each sample which land in our high confidence peaks

First we will count one file with featureCounts. The first step is to convert our files to SAF format.


```{r,eval=T,echo=TRUE,message=T,warning=F}
Bams <- dir("../../chipseqcourseData/sortedbams/",pattern="*sorted\\..*bam$",full.names=T)

simplePeaksToCount <- ChIPQC:::GetGRanges(PeaksToCount,simple=T,simplify=T)


toCount <- data.frame(GeneID = paste0("ID",seq(1,length(simplePeaksToCount))),
                      Chr=seqnames(simplePeaksToCount),Start=start(simplePeaksToCount),
                      End=end(simplePeaksToCount),Strand="-")

out  <- capture.output(myCountTable <- featureCounts(Bams[1],annot.ext = toCount,nthreads=1))

myCountTable$counts[1:10]
```



Simple Differential binding - Counting all files
========================================================
Now we can use a lapply to count all samples in high confidence peaks

```{r, echo=FALSE}
if(!file.exists("../robjects/MycCounts.RData")){
out <- capture.output(
  myCountTableList <- lapply(Bams,function(x)
                               featureCounts(x,annot.ext = toCount,nthreads=4))
)
}
```

```{r, echo=TRUE,eval=F}

out <- capture.output(
  myCountTableList <- lapply(Bams,function(x)
                               featureCounts(x,annot.ext = toCount,nthreads=4))
)

```
You could have a look at **out** to compare mapping ratres between input and ChIP 

Simple Differential binding - Stitching count files together
========================================================
Now we can use a lapply to count all samples in high confidence peaks

```{r, echo=TRUE,eval=FALSE}

countTable <- sapply(myCountTableList,function(x)x$counts)
rownames(countTable) <- paste0(toCount[,1],"-",toCount[,2],";",toCount[,3],"-",toCount[,4])
colnames(countTable) <- c("ch12myc","ch12myc","ch12input","melmyc","melmyc","meinput")
```

```{r, echo=FALSE,eval=FALSE}
if(!file.exists("../robjects/MycCounts.RData")){
save(countTable,file="../robjects/MycCounts.RData")
}
```

Simple Differential binding - A simple DEseq2 DE analysis
========================================================
Here we set up a DEseq2 object much as you would for RNAseq.
We define the conditions in **colData** as CellLines for Mel and ch12

This will identify any significant differennces in Myc binding between the cell lines.

```{r, echo=FALSE,eval=T}

load("../robjects/MycCounts.RData")
```

```{r, echo=TRUE}
library("DESeq2")

colData <- data.frame(SampleName=colnames(countTable[,-c(3,6)]),CellLine=c("ch12","ch12","mel","mel"))
dds <- DESeqDataSetFromMatrix(countData = countTable[,-c(3,6)],
                              colData = colData,
                              design = ~ CellLine)

dds <- DESeq(dds)
testcellline <- results(dds, contrast=c("CellLine","ch12","mel"))
```

Simple Differential binding - The DE
========================================================
Here we can see our top changing peaks.
```{r, echo=T,eval=T}

testcellline <- testcellline[order(testcellline$pvalue),]
testcellline <- as.data.frame(testcellline)
testcellline[1:3,]
```

Simple Differential binding - Creating the DE GRanges
========================================================
Now we can make GRanges for ease later
```{r, echo=T,eval=T}
resultsMat <- matrix(unlist(strsplit(rownames(testcellline),"-")),byrow=T,ncol=3)
resultMatPart2 <- matrix(unlist(strsplit(resultsMat[,2],";")),byrow=T,ncol=2)
DEasGRanges <- GRanges(seqnames=resultMatPart2[,1],IRanges(as.numeric(as.vector(resultMatPart2[,2])),as.numeric(as.vector(resultsMat[,3]))),elementMetadata=testcellline)
colnames(elementMetadata(DEasGRanges)) <- gsub("elementMetadata","",colnames(elementMetadata(DEasGRanges)))
DEasGRanges[1:5,]
```

```{r, echo=F,eval=F}

save(DEasGRanges,file="robjects/DEasGRanges.RData")
```

sessionInfo
========================================================
Now we can make GRanges for ease later
```{r, echo=T,eval=T}
sessionInfo()
```







