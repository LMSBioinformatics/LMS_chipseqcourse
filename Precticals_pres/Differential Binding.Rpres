Differential Binding
========================================================

First Slide
========================================================

We may expect binding to occur in differing conditions.
There are tow main ways of looking for differing peaks
Occupancy analysis 
Differential binding analysis

Here we will briefly discuss both

loading the libraries
========================================================


```{r}
library(ChIPQC)
library(soGGi)
library(DESeq2)
library(GenomicRanges)
```



Reading in a peak from Macs
========================================================

```{r}
macsPeaks <- dir("/Users/tcarroll/chipseqcourse/MacsPeaks/",full.names=T)
singlePeakSet <- ChIPQC:::GetGRanges(macsPeaks[1],sep="\t",simplify=T)
```

Getting a consensus set
========================================================

```{r, echo=TRUE}
listOfPeaks <- GRangesList(lapply(macsPeaks,function(x)ChIPQC:::GetGRanges(x,sep="\t",simplify=T)))
flattenedPeaks <- unlist(listOfPeaks)
```

The next step would be to identify when samples shared peaks
========================================================
```{r, echo=TRUE}
matOfOverlaps <- sapply(listOfPeaks,function(x)
(flattenedPeaks %over% x)+0
)
colnames(matOfOverlaps) <- basename(gsub("_peaks\\.xls","",macsPeaks))
elementMetadata(flattenedPeaks) <- matOfOverlaps
flattenedPeaks[1:2,]
```

========================================================
We can get a quick idea about where overlaps occur using vennCounts

```{r, echo=TRUE}
limma:::vennCounts(as.data.frame(elementMetadata(flattenedPeaks)))
```


========================================================
Or we can view as VennDiagram

```{r, echo=TRUE}
limma:::vennDiagram(as.data.frame(elementMetadata(flattenedPeaks)))
```


========================================================
Now we can identify common peaks

```{r, echo=TRUE}

mych12Peaks <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycch12rep1 + 
                 elementMetadata(flattenedPeaks)$mycch12rep2 == 2]
mycMelPeaks <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycmelrep1 +                  elementMetadata(flattenedPeaks)$mycmelrep2 == 2]

```

========================================================
And some unique peaks 
```{r, echo=TRUE}

mycMelPeaks_Only <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycmelrep1 +                  elementMetadata(flattenedPeaks)$mycmelrep2 == 2 &
elementMetadata(flattenedPeaks)$mycch12rep1 + 
                 elementMetadata(flattenedPeaks)$mycch12rep2 == 0]

```

We can check the Venn to see our numbers add up

Simple Differential binding
========================================================
Now we take high confidence peaks in either condition.

```{r, echo=TRUE}

highConfidence_Only <- flattenedPeaks[elementMetadata(flattenedPeaks)$mycmelrep1 +                  elementMetadata(flattenedPeaks)$mycmelrep2 == 2 |
elementMetadata(flattenedPeaks)$mycch12rep1 + 
                 elementMetadata(flattenedPeaks)$mycch12rep2 == 2]

```

Simple Differential binding
========================================================
Now we can look to see if we need resizing.
```{r, echo=TRUE}
boxplot(width(highConfidence_Only))
abline(h=400,col="red")
```
The majority of peaks are around 400 so we will resize all peaks to this for ease here

Simple Differential binding
========================================================
Now we can look to see if we need resizing.
```{r, echo=TRUE}
PeaksToCount <- resize(highConfidence_Only,width = 400,fix = "center")

```
